{"version":3,"file":"authkeeper.js","mappings":"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","sources":["webpack://authkeeper/webpack/universalModuleDefinition","webpack://authkeeper/webpack/bootstrap","webpack://authkeeper/webpack/runtime/define property getters","webpack://authkeeper/webpack/runtime/hasOwnProperty shorthand","webpack://authkeeper/webpack/runtime/make namespace object","webpack://authkeeper/./lib/utils/cryptoUtils.js","webpack://authkeeper/./lib/client.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"authkeeper\"] = factory();\n\telse\n\t\troot[\"authkeeper\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// utils/cryptoUtils.js\nclass CryptoUtils {\n    static generateRandomString(length = 28) {\n        const array = new Uint32Array(length);\n        window.crypto.getRandomValues(array);\n        return Array.from(array, dec => ('0' + dec.toString(16)).substr(-2)).join('');\n    }\n\n    static base64urlencode(buffer) {\n        return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)))\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '');\n    }\n\n    static async sha256(plain) {\n        const encoder = new TextEncoder();\n        const data = encoder.encode(plain);\n        return window.crypto.subtle.digest('SHA-256', data);\n    }\n\n    static async pkceChallengeFromVerifier(verifier) {\n        const hashed = await this.sha256(verifier);\n        return this.base64urlencode(hashed);\n    }\n\n        // Helper function to parse query string\n    static parseQueryString(query) {\n        const params = new URLSearchParams(query);\n        const result = {};\n        for (let [key, value] of params.entries()) {\n            result[key] = value;\n        }\n        return result;\n    }\n}\n\nexport default CryptoUtils;","import CryptoUtils from './utils/cryptoUtils';\n\nclass OAuthClient {\n    constructor(config) {\n      this.client_id = config.client_id;\n      this.client_secret = config.client_secret;\n      this.redirect_uri = config.redirect_uri;\n      this.authorization_url = config.authorization_url;\n      this.token_url = config.token_url;\n      this.scope = config.scope;\n    }\n\n    // Start OAuth flow (Authorization Code + PKCE)\n    async startAuthFlow() {\n      const state = CryptoUtils.generateRandomString();\n      localStorage.setItem(\"pkce_state\", state);\n\n      const codeVerifier = CryptoUtils.generateRandomString();\n      localStorage.setItem(\"pkce_code_verifier\", codeVerifier);\n\n      const codeChallenge = await CryptoUtils.pkceChallengeFromVerifier(codeVerifier);\n\n      const url = `${this.authorization_url}?response_type=code&client_id=${encodeURIComponent(this.client_id)}&state=${encodeURIComponent(state)}&scope=${encodeURIComponent(this.scope)}&redirect_uri=${encodeURIComponent(this.redirect_uri)}&code_challenge=${encodeURIComponent(codeChallenge)}&code_challenge_method=S256`;\n\n      window.location = url;\n  }\n    // Handle OAuth callback\n    async handleCallback() {\n      const q = CryptoUtils.parseQueryString(window.location.search.substring(1));\n  \n      if (q.error) {\n        alert(\"Error: \" + q.error);\n      }\n  \n      if (q.code) {\n        if (localStorage.getItem(\"pkce_state\") !== q.state) {\n          alert(\"Invalid state\");\n        } else {\n          await this.exchangeAuthCodeForToken(q.code);\n        }\n      }\n  \n      localStorage.removeItem(\"pkce_state\");\n      localStorage.removeItem(\"pkce_code_verifier\");\n    }\n  \n\n    async exchangeAuthCodeForToken(code) {\n      const codeVerifier = localStorage.getItem(\"pkce_code_verifier\");\n      if (!codeVerifier) {\n          console.error(\"Code verifier is missing from localStorage.\");\n          return null; // Return null if code verifier is missing\n      }\n  \n      const audience = new URL(\"/api/v2/\", this.token_url).origin;\n  \n      const payload = {\n          client_id: this.client_id,\n          client_secret: this.client_secret, // Include client_secret if required\n          grant_type: \"authorization_code\",\n          code: code,\n          redirect_uri: this.redirect_uri,\n          code_verifier: codeVerifier,\n          audience: audience,\n      };\n  \n      try {\n          // Use Fetch API to make the POST request\n          const response = await fetch(this.token_url, {\n              method: \"POST\",\n              headers: {\n                  \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify(payload),\n          });\n  \n          // Check if the response is okay before trying to parse it\n          if (!response.ok) {\n              const errorText = await response.text(); // Get the raw error message if not ok\n              console.error(\"Token exchange failed with status:\", response.status, \"Response:\", errorText);\n              return null; // Return null on failure\n          }\n  \n          // Parse the JSON response only if the request was successful\n          const data = await response.json();\n  \n          // Check if data exists before returning it\n          if (!data) {\n              console.error(\"No token data returned.\");\n              return null;\n          }\n  \n          // Save the token to localStorage\n          localStorage.setItem(\"auth_token\", JSON.stringify(data));\n  \n          return data; // Return the token data\n  \n      } catch (err) {\n          console.error(\"Error during token exchange:\", err);\n          return null; // Return null on error\n      }\n  }  \n\n\n}\n  \n  export { OAuthClient };\n\n  "],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","generateRandomString","length","array","Uint32Array","window","crypto","getRandomValues","Array","from","dec","toString","substr","join","base64urlencode","buffer","btoa","String","fromCharCode","apply","Uint8Array","replace","sha256","plain","data","TextEncoder","encode","subtle","digest","pkceChallengeFromVerifier","verifier","hashed","this","parseQueryString","query","params","URLSearchParams","result","entries","OAuthClient","constructor","config","client_id","client_secret","redirect_uri","authorization_url","token_url","scope","startAuthFlow","state","localStorage","setItem","codeVerifier","codeChallenge","url","encodeURIComponent","location","handleCallback","q","search","substring","error","alert","code","getItem","exchangeAuthCodeForToken","removeItem","console","audience","URL","origin","payload","grant_type","code_verifier","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","status","json","err"],"sourceRoot":""}